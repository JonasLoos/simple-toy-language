?start: _NEWLINE* program

// helpers

comma_list{item}: [item ("," item)* [","]]

// function definition

program: function_def+
function_def: "def" NAME "(" comma_list{NAME} ")" body
?stmt: line_stmt _NEWLINE | multiline_stmt

// multiline statements

multiline_stmt: do_stmt | if_stmt
body: _NEWLINE _INDENT stmt+ _DEDENT
do_stmt: "do" body
if_stmt: "if" line_stmt body elifs else
elifs: elif*
elif: "elif" line_stmt body
else: ["else" body]

// statements

line_stmt: funccall | assignment | thing
funccall: NAME "(" comma_list{line_stmt} ")"
assignment: NAME "=" line_stmt


thing: NAME | string | number

// special terminals and rules

_NEWLINE: ( /\r?\n[\t ]*/ | COMMENT )+

%ignore /[\t \f]+/  // WS
%ignore /\\[\t \f]*\r?\n/   // LINE_CONT
%ignore COMMENT
%declare _INDENT _DEDENT

// common terminals

NAME: /[a-zA-Z_]\w*/
COMMENT: /#[^\n]*/

?string: STRING | LONG_STRING
STRING : /("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?'|`(?!``).*?(?<!\\)(\\\\)*?`)/i
LONG_STRING: /(""".*?(?<!\\)(\\\\)*?"""|'''.*?(?<!\\)(\\\\)*?'''|```.*?(?<!\\)(\\\\)*?```)/is

?number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER | IMAG_NUMBER
DEC_NUMBER: /0|[1-9][\d_]*/i
HEX_NUMBER.2: /0x[\da-f]*/i
OCT_NUMBER.2: /0o[0-7]*/i
BIN_NUMBER.2 : /0b[0-1]*/i
FLOAT_NUMBER.2: /((\d+\.[\d_]*|\.[\d_]+)([Ee][-+]?\d+)?|\d+([Ee][-+]?\d+))/
IMAG_NUMBER.2: /\d+[JjIi]/ | FLOAT_NUMBER /[JjIi]/
